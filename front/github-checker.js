// github-checker.js
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('check-repo-form');
    const resultDiv = document.getElementById('result');
    const historyDiv = document.getElementById('history');
    const historyBtn = document.getElementById('history-btn');
    const profileBtn = document.getElementById('profile-btn');
    
    let checkHistory = JSON.parse(localStorage.getItem('githubCheckHistory')) || [];
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    profileBtn.addEventListener('click', function() {
        window.location.href = 'profile.html';
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    historyBtn.addEventListener('click', function() {
        const isVisible = historyDiv.style.display !== 'none';
        historyDiv.style.display = isVisible ? 'none' : 'block';
        resultDiv.style.display = isVisible ? 'block' : 'none';
        
        if (!isVisible) {
            displayHistory();
        }
    });
    
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const url = document.getElementById('repo-url').value;
        const resultDiv = document.getElementById('result');
        const statusBadge = document.getElementById('repo-status');
        const repoInfo = document.getElementById('repo-info');
        
        resultDiv.style.display = 'block';
        historyDiv.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        statusBadge.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        statusBadge.className = 'status-badge';
        repoInfo.innerHTML = '<p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...</p>';
        
        try {
            const repoData = await checkGitHubRepo(url);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            const checkItem = {
                url: url,
                status: repoData.isPrivate ? 'private' : 'open',
                timestamp: new Date().toISOString(),
                repoName: repoData.full_name || url
            };
            
            checkHistory.unshift(checkItem);
            if (checkHistory.length > 10) checkHistory = checkHistory.slice(0, 10);
            localStorage.setItem('githubCheckHistory', JSON.stringify(checkHistory));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            if (repoData.isPrivate) {
                statusBadge.textContent = 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π';
                statusBadge.className = 'status-badge private';
                repoInfo.innerHTML = `
                    <h4>${repoData.full_name || '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ó–∞–∫—Ä—ã—Ç—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</p>
                    <p><strong>–î–æ—Å—Ç—É–ø:</strong> –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p class="error">‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.</p>
                `;
            } else {
                statusBadge.textContent = 'üîì –û—Ç–∫—Ä—ã—Ç—ã–π';
                statusBadge.className = 'status-badge open';
                repoInfo.innerHTML = `
                    <h4>${repoData.full_name || '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${repoData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                    <p><strong>–Ø–∑—ã–∫:</strong> ${repoData.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–ó–≤–µ–∑–¥—ã:</strong> ${repoData.stargazers_count || 0}</p>
                    <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> ${new Date(repoData.updated_at).toLocaleDateString()}</p>
                    <p class="success">‚úÖ –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö.</p>
                `;
            }
            
        } catch (error) {
            statusBadge.textContent = '‚ùå –û—à–∏–±–∫–∞';
            statusBadge.className = 'status-badge error';
            repoInfo.innerHTML = `
                <p class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:</p>
                <p>${error.message}</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
            `;
        }
    });
    
    function displayHistory() {
        const historyList = document.getElementById('history-list');
        historyList.innerHTML = '';
        
        if (checkHistory.length === 0) {
            historyList.innerHTML = '<p>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞</p>';
            return;
        }
        
        checkHistory.forEach(item => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <strong>${item.repoName}</strong>
                <span class="check-status ${item.status}">${item.status === 'open' ? 'üîì –û—Ç–∫—Ä—ã—Ç—ã–π' : 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π'}</span>
                <br>
                <small>${new Date(item.timestamp).toLocaleString()}</small>
            `;
            historyList.appendChild(historyItem);
        });
    }
    
    async function checkGitHubRepo(url) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ repo name –∏–∑ URL
        const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
        if (!match) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub —Å—Å—ã–ª–∫–∏');
        }
        
        const [, username, repo] = match;
        const apiUrl = `https://api.github.com/repos/${username}/${repo}`;
        
        try {
            const response = await fetch(apiUrl);
            
            if (response.status === 404) {
                throw new Error('–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            if (response.status === 403) {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É
                return await checkRepoViaPage(url);
            }
            
            const data = await response.json();
            
            if (response.status !== 200) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API');
            }
            
            return {
                full_name: data.full_name,
                description: data.description,
                language: data.language,
                stargazers_count: data.stargazers_count,
                updated_at: data.updated_at,
                isPrivate: data.private
            };
            
        } catch (error) {
            if (error.message.includes('Failed to fetch')) {
                // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                return await checkRepoViaPage(url);
            }
            throw error;
        }
    }
    
    async function checkRepoViaPage(url) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            const response = await fetch(url);
            if (response.status === 404) {
                return { isPrivate: true };
            }
            return { isPrivate: false };
        } catch (error) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
        }
    }
});