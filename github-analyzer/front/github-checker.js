// github-checker.js
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('check-repo-form');
    const resultDiv = document.getElementById('result');
    const historyDiv = document.getElementById('history');
    
    let checkHistory = JSON.parse(localStorage.getItem('githubCheckHistory')) || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const historyBtn = document.getElementById('history-btn');
    const profileBtn = document.getElementById('profile-btn');
    
    if (profileBtn) {
        profileBtn.addEventListener('click', function() {
            window.location.href = 'profile.html';
        });
    }
    
    if (historyBtn) {
        historyBtn.addEventListener('click', function() {
            const isVisible = historyDiv.style.display !== 'none';
            historyDiv.style.display = isVisible ? 'none' : 'block';
            resultDiv.style.display = isVisible ? 'block' : 'none';
            
            if (!isVisible) {
                displayHistory();
            }
        });
    }
    
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('Form submitted!');
        
        const url = document.getElementById('repo-url').value;
        console.log('URL:', url);
        
        const resultDiv = document.getElementById('result');
        const statusBadge = document.getElementById('repo-status');
        const repoInfo = document.getElementById('repo-info');
        
        resultDiv.style.display = 'block';
        historyDiv.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        statusBadge.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        statusBadge.className = 'status-badge';
        repoInfo.innerHTML = '<p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...</p>';
        
        console.log('Starting analysis...');
        
        try {
            const repoData = await checkGitHubRepo(url);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            const checkItem = {
                url: url,
                status: repoData.status,
                timestamp: new Date().toISOString(),
                repoName: repoData.repo_info?.name || url.split('/').slice(-2).join('/')
            };
            
            checkHistory.unshift(checkItem);
            if (checkHistory.length > 10) checkHistory = checkHistory.slice(0, 10);
            localStorage.setItem('githubCheckHistory', JSON.stringify(checkHistory));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            if (repoData.status === 'private') {
                statusBadge.textContent = 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π';
                statusBadge.className = 'status-badge private';
                repoInfo.innerHTML = `
                    <h4>${repoData.repo_info?.name || '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</p>
                    <p><strong>–î–æ—Å—Ç—É–ø:</strong> –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p class="error">‚ö†Ô∏è ${repoData.message}</p>
                `;
            } else if (repoData.status === 'success') {
                statusBadge.textContent = '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω';
                statusBadge.className = 'status-badge open';
                
                let analysisHtml = '';
                if (repoData.ai_analysis) {
                    const analysis = repoData.ai_analysis;
                    
                    if (analysis.recommendations && analysis.recommendations.length > 0) {
                        analysisHtml += `
                            <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é:</h5>
                            <ul>
                                ${analysis.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                            </ul>
                        `;
                    }
                    
                    if (analysis.files_to_add && analysis.files_to_add.length > 0) {
                        analysisHtml += `
                            <h5>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</h5>
                            <ul>
                                ${analysis.files_to_add.map(file => `
                                    <li>
                                        <strong>${file.name}</strong> - ${file.description}
                                        <pre><code>${file.content}</code></pre>
                                    </li>
                                `).join('')}
                            </ul>
                        `;
                    }
                    
                    if (analysis.deployment_plan && analysis.deployment_plan.length > 0) {
                        analysisHtml += `
                            <h5>–ü–ª–∞–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:</h5>
                            <ol>
                                ${analysis.deployment_plan.map(step => `<li>${step}</li>`).join('')}
                            </ol>
                        `;
                    }
                    
                    if (analysis.tech_stack_analysis) {
                        analysisHtml += `
                            <h5>–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞:</h5>
                            <p>${analysis.tech_stack_analysis}</p>
                        `;
                    }
                }
                
                repoInfo.innerHTML = `
                    <h4>${repoData.repo_info?.name || '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${repoData.message}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${repoData.repo_info?.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                    <p><strong>–Ø–∑—ã–∫:</strong> ${repoData.repo_info?.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–ó–≤–µ–∑–¥—ã:</strong> ${repoData.repo_info?.stargazers_count || 0}</p>
                    <p><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> ${repoData.detected_info?.languages?.join(', ') || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}</p>
                    <p class="success">‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Amazing Automata.</p>
                    
                    <div class="download-section">
                        <h5>üì¶ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Amazing Automata</h5>
                        <p>–ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CI/CD:</p>
                        <button class="btn download-btn" onclick="downloadAmazingAutomataConfig('${url}', ${JSON.stringify(repoData).replace(/"/g, '&quot;')})">
                            ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å automata.yml
                        </button>
                    </div>
                    
                    ${analysisHtml}
                `;
            } else {
                statusBadge.textContent = '‚ùå –û—à–∏–±–∫–∞';
                statusBadge.className = 'status-badge error';
                repoInfo.innerHTML = `
                    <h4>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h4>
                    <p class="error">${repoData.message}</p>
                `;
            }
            
        } catch (error) {
            statusBadge.textContent = '‚ùå –û—à–∏–±–∫–∞';
            statusBadge.className = 'status-badge error';
            repoInfo.innerHTML = `
                <p class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:</p>
                <p>${error.message}</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
            `;
        }
    });
    
    function displayHistory() {
        const historyList = document.getElementById('history-list');
        historyList.innerHTML = '';
        
        if (checkHistory.length === 0) {
            historyList.innerHTML = '<p>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞</p>';
            return;
        }
        
        checkHistory.forEach(item => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <strong>${item.repoName}</strong>
                <span class="check-status ${item.status}">${item.status === 'open' ? 'üîì –û—Ç–∫—Ä—ã—Ç—ã–π' : 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π'}</span>
                <br>
                <small>${new Date(item.timestamp).toLocaleString()}</small>
            `;
            historyList.appendChild(historyItem);
        });
    }
    
    async function checkGitHubRepo(url) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try {
            console.log('Making API request to /analyze');
            const response = await fetch('/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ github_url: url })
            });
            
            console.log('Response status:', response.status);
            
            if (response.ok) {
                const data = await response.json();
                console.log('API response:', data);
                return data;
            } else {
                const error = await response.json();
                console.error('API error:', error);
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API');
            }
            
        } catch (error) {
            console.error('API request failed:', error);
            // Fallback: –ø—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GitHub API
            return await checkGitHubRepoDirect(url);
        }
    }
    
    async function checkGitHubRepoDirect(url) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ repo name –∏–∑ URL
        const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
        if (!match) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub —Å—Å—ã–ª–∫–∏');
        }
        
        const [, username, repo] = match;
        const apiUrl = `https://api.github.com/repos/${username}/${repo}`;
        
        try {
            const response = await fetch(apiUrl);
            
            if (response.status === 404) {
                throw new Error('–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            if (response.status === 403) {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É
                return await checkRepoViaPage(url);
            }
            
            const data = await response.json();
            
            if (response.status !== 200) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API');
            }
            
            return {
                status: data.private ? 'private' : 'success',
                message: data.private ? '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' : '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω',
                repo_info: {
                    name: data.full_name,
                    description: data.description,
                    language: data.language,
                    stargazers_count: data.stargazers_count,
                    html_url: data.html_url
                },
                detected_info: {
                    languages: [data.language].filter(Boolean)
                }
            };
            
        } catch (error) {
            if (error.message.includes('Failed to fetch')) {
                // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                return await checkRepoViaPage(url);
            }
            throw error;
        }
    }
    
    async function checkRepoViaPage(url) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            const response = await fetch(url);
            if (response.status === 404) {
                return { isPrivate: true };
            }
            return { isPrivate: false };
        } catch (error) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Amazing Automata
function downloadAmazingAutomataConfig(githubUrl, repoData) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ URL
        const repoName = githubUrl.split('/').slice(-1)[0].replace('.git', '');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é automata.yml
        const config = generateAmazingAutomataConfig(repoData, repoName);
        
        // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = new Blob([config], { type: 'text/yaml' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'automata.yml';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        showUsageInstructions(repoName);
        
    } catch (error) {
        console.error('Error downloading config:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + error.message);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ automata.yml
function generateAmazingAutomataConfig(repoData, repoName) {
    const languages = repoData.detected_info?.languages || [];
    const hasPython = languages.includes('python');
    const hasNode = languages.includes('node') || languages.includes('javascript');
    const hasJava = languages.includes('java');
    const hasGo = languages.includes('go');
    const hasRust = languages.includes('rust');
    
    let config = `name: ${repoName}
version: 1.0.0
description: Auto-generated config for ${repoName}
build:
`;

    if (hasPython) {
        config += `  python:
    command: pip install -r requirements.txt
    output: dist/
`;
    }
    
    if (hasNode) {
        config += `  node:
    command: npm ci && npm run build
    output: dist/
`;
    }
    
    if (hasJava) {
        config += `  java:
    command: mvn clean package -DskipTests
    output: target/*.jar
`;
    }
    
    if (hasGo) {
        config += `  go:
    command: go build -o bin/app .
    output: bin/
`;
    }
    
    if (hasRust) {
        config += `  rust:
    command: cargo build --release
    output: target/release/
`;

    config += `
test:
`;

    if (hasPython) {
        config += `  python:
    command: pytest -v
    coverage: true
`;
    }
    
    if (hasNode) {
        config += `  node:
    command: npm test
    coverage: true
`;
    }
    
    if (hasJava) {
        config += `  java:
    command: mvn test
    coverage: true
`;
    }

    config += `
deploy:
  docker:
    image: ${repoName}:latest
    file: Dockerfile
    port: 8000
    push: false
    env:
`;

    if (hasNode) {
        config += `      NODE_ENV: production
      PORT: "8000"
`;
    }
    
    if (hasPython) {
        config += `      PYTHONUNBUFFERED: "1"
      PORT: "8000"
`;
    }

    config += `
  ssh:
    host: localhost
    user: root
    path: /opt/${repoName}
    restart: systemctl restart ${repoName}
`;

    return config;
}

// –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
function showUsageInstructions(repoName) {
    const instructions = `
üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è automata.yml —Å–∫–∞—á–∞–Ω–∞!

üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª automata.yml –≤ –∫–æ—Ä–µ–Ω—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Amazing Automata
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é:

   python -m automata_cli.cli run --cwd . --config automata.yml --stage all

4. –ò–ª–∏ –ø–æ —ç—Ç–∞–ø–∞–º:
   python -m automata_cli.cli run --cwd . --stage detect    # –î–µ—Ç–µ–∫—Ü–∏—è
   python -m automata_cli.cli run --cwd . --stage build     # –°–±–æ—Ä–∫–∞  
   python -m automata_cli.cli run --cwd . --stage test      # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   python -m automata_cli.cli run --cwd . --stage deploy    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

‚ú® Amazing Automata –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –û–±–Ω–∞—Ä—É–∂–∏—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
   - –°–æ–±–µ—Ä–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   - –ó–∞–ø—É—Å—Ç–∏—Ç —Ç–µ—Å—Ç—ã
   - –°–æ–∑–¥–∞—Å—Ç Docker –æ–±—Ä–∞–∑
   - –†–∞–∑–≤–µ—Ä–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!`;

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        padding: 30px;
        border-radius: 10px;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    `;
    
    modalContent.innerHTML = `
        <h3>üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞—á–∞–Ω–∞!</h3>
        <pre style="background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; white-space: pre-wrap;">${instructions}</pre>
        <button onclick="this.parentElement.parentElement.remove()" style="
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 15px;
        ">–ü–æ–Ω—è—Ç–Ω–æ!</button>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}