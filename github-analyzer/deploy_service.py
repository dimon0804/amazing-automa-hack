import os
import asyncio
import subprocess
import tempfile
import shutil
import json
import re
from pathlib import Path
from typing import Dict, Any, AsyncGenerator
import paramiko
import threading
import time


class DeployService:
    def __init__(self, automata_path: Path):
        self.automata_path = automata_path
        self.active_deployments = {}
        
    async def test_server_connection(self, server_config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            ssh.connect(
                hostname=server_config['ip'],
                port=server_config['port'],
                username=server_config['user'],
                password=server_config['password'],
                timeout=10
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            stdin, stdout, stderr = ssh.exec_command('echo "SSH connection successful"')
            result = stdout.read().decode().strip()
            
            ssh.close()
            
            return {
                'success': True,
                'message': 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                'result': result
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'message': f'–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    async def deploy_repository(self, server_config: Dict[str, Any], repo_info: Dict[str, Any]) -> AsyncGenerator[str, None]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        deployment_id = f"{repo_info['name']}_{int(time.time())}"
        self.active_deployments[deployment_id] = {
            'status': 'running',
            'started_at': time.time()
        }
        
        try:
            yield f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {repo_info['name']} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_config['ip']}"
            
            # 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            yield "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
            temp_dir = await self._clone_repository(repo_info)
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
            yield "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫..."
            detected_info = await self._analyze_project(temp_dir)
            yield f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(detected_info.get('languages', []))}"
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            yield "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é automata.yml..."
            await self._generate_config(temp_dir, detected_info, repo_info['name'])
            
            # 4. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            yield "üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
            archive_path = await self._create_archive(temp_dir, repo_info['name'])
            
            # 5. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            yield f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_config['ip']}..."
            ssh = await self._connect_to_server(server_config)
            
            # 6. –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            yield "üì§ –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
            remote_path = f"{server_config['deployPath']}/{repo_info['name']}"
            await self._upload_to_server(ssh, archive_path, remote_path)
            
            # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            yield "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
            await self._install_dependencies(ssh, remote_path, detected_info)
            
            # 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Amazing Automata
            yield "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
            await self._run_automata_deploy(ssh, remote_path, repo_info['name'])
            
            # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            yield "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
            app_status = await self._check_application_status(ssh, repo_info['name'])
            
            ssh.close()
            
            # –û—á–∏—Å—Ç–∫–∞
            shutil.rmtree(temp_dir, ignore_errors=True)
            os.remove(archive_path)
            
            yield "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
            yield f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: {app_status.get('url', 'http://server-ip:port')}"
            
            self.active_deployments[deployment_id]['status'] = 'completed'
            
        except Exception as e:
            yield f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {str(e)}"
            self.active_deployments[deployment_id]['status'] = 'failed'
            raise
    
    async def _clone_repository(self, repo_info: Dict[str, Any]) -> Path:
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        temp_dir = Path(tempfile.mkdtemp())
        
        branch = repo_info.get('branch', 'main')
        clone_url = repo_info['url']
        
        try:
            result = subprocess.run([
                'git', 'clone', '--depth', '1', '--branch', branch, 
                clone_url, str(temp_dir)
            ], capture_output=True, text=True, check=True, timeout=60)
            
            return temp_dir
        except subprocess.CalledProcessError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e.stderr}")
        except subprocess.TimeoutExpired:
            raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    
    async def _analyze_project(self, project_path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        try:
            env = os.environ.copy()
            env['PYTHONPATH'] = str(self.automata_path) + os.pathsep + env.get('PYTHONPATH', '')
            
            result = subprocess.run([
                "python", "-m", "automata_cli.cli", "run", 
                "--cwd", str(project_path), "--stage", "detect"
            ], capture_output=True, text=True, check=True, env=env, cwd=self.automata_path)
            
            return json.loads(result.stdout)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
    
    async def _generate_config(self, project_path: Path, detected_info: Dict[str, Any], project_name: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç automata.yml –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            env = os.environ.copy()
            env['PYTHONPATH'] = str(self.automata_path) + os.pathsep + env.get('PYTHONPATH', '')
            
            subprocess.run([
                "python", "-m", "automata_cli.cli", "generate", 
                "--cwd", str(project_path), "--force"
            ], capture_output=True, text=True, check=True, env=env, cwd=self.automata_path)
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    async def _create_archive(self, project_path: Path, project_name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        archive_path = tempfile.mktemp(suffix='.tar.gz')
        
        try:
            subprocess.run([
                'tar', '-czf', archive_path, '-C', str(project_path.parent), project_path.name
            ], check=True, capture_output=True)
            
            return archive_path
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {str(e)}")
    
    async def _connect_to_server(self, server_config: Dict[str, Any]) -> paramiko.SSHClient:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            ssh.connect(
                hostname=server_config['ip'],
                port=server_config['port'],
                username=server_config['user'],
                password=server_config['password'],
                timeout=30
            )
            
            return ssh
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
    
    async def _upload_to_server(self, ssh: paramiko.SSHClient, archive_path: str, remote_path: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            sftp = ssh.open_sftp()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            stdin, stdout, stderr = ssh.exec_command(f'mkdir -p {remote_path}')
            stdout.channel.recv_exit_status()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
            remote_archive = f"{remote_path}/project.tar.gz"
            sftp.put(archive_path, remote_archive)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && tar -xzf project.tar.gz --strip-components=1')
            stdout.channel.recv_exit_status()
            
            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            stdin, stdout, stderr = ssh.exec_command(f'rm {remote_archive}')
            stdout.channel.recv_exit_status()
            
            sftp.close()
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {str(e)}")
    
    async def _install_dependencies(self, ssh: paramiko.SSHClient, remote_path: str, detected_info: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            languages = detected_info.get('languages', [])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            stdin, stdout, stderr = ssh.exec_command('which docker || (curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh)')
            stdout.channel.recv_exit_status()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if 'python' in languages:
                stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && python3 -m pip install --upgrade pip')
                stdout.channel.recv_exit_status()
                
                stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && pip3 install -r requirements.txt')
                stdout.channel.recv_exit_status()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if 'node' in languages:
                stdin, stdout, stderr = ssh.exec_command('which node || (curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs)')
                stdout.channel.recv_exit_status()
                
                stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && npm install')
                stdout.channel.recv_exit_status()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Java –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if 'java' in languages:
                stdin, stdout, stderr = ssh.exec_command('which java || sudo apt-get update && sudo apt-get install -y openjdk-17-jdk')
                stdout.channel.recv_exit_status()
                
                stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && chmod +x gradlew && ./gradlew build -x test')
                stdout.channel.recv_exit_status()
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
    
    async def _run_automata_deploy(self, ssh: paramiko.SSHClient, remote_path: str, project_name: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Amazing Automata –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º automata_cli –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            sftp = ssh.open_sftp()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è automata_cli
            stdin, stdout, stderr = ssh.exec_command(f'mkdir -p {remote_path}/automata_cli')
            stdout.channel.recv_exit_status()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã automata_cli
            automata_files = [
                'automata_cli/__init__.py',
                'automata_cli/cli.py',
                'automata_cli/pipeline.py',
                'automata_cli/detectors.py',
                'automata_cli/utils/config.py',
                'automata_cli/generators/config_generator.py',
                'automata_cli/runners/builders.py',
                'automata_cli/runners/tests.py',
                'automata_cli/runners/deploy.py'
            ]
            
            for file_path in automata_files:
                if (self.automata_path / file_path).exists():
                    remote_file = f"{remote_path}/{file_path}"
                    sftp.put(str(self.automata_path / file_path), remote_file)
            
            sftp.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            stdin, stdout, stderr = ssh.exec_command(f'cd {remote_path} && PYTHONPATH={remote_path} python3 -m automata_cli.cli run --cwd . --stage all')
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥
            while True:
                line = stdout.readline()
                if not line:
                    break
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            
            stdout.channel.recv_exit_status()
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {str(e)}")
    
    async def _check_application_status(self, ssh: paramiko.SSHClient, project_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            stdin, stdout, stderr = ssh.exec_command(f'docker ps --filter "name={project_name}-app" --format "{{{{.Names}}}}:{{{{.Status}}}}"')
            container_info = stdout.read().decode().strip()
            
            if container_info:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                stdin, stdout, stderr = ssh.exec_command(f'docker port {project_name}-app')
                port_info = stdout.read().decode().strip()
                
                return {
                    'status': 'running',
                    'container': container_info,
                    'ports': port_info,
                    'url': f'http://server-ip:8000'  # –ë–∞–∑–æ–≤—ã–π URL
                }
            else:
                return {
                    'status': 'not_running',
                    'message': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def stop_deployment(self, deployment_id: str = None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        if deployment_id and deployment_id in self.active_deployments:
            self.active_deployments[deployment_id]['status'] = 'stopped'
        else:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            for dep_id in self.active_deployments:
                if self.active_deployments[dep_id]['status'] == 'running':
                    self.active_deployments[dep_id]['status'] = 'stopped'
